<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure Function App on RoosTech</title>
    <link>https://blog.roostech.se/tags/azure-function-app/</link>
    <description>Recent content in Azure Function App on RoosTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Dec 2020 21:30:00 +0200</lastBuildDate><atom:link href="https://blog.roostech.se/tags/azure-function-app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get function configuration from deployed Function App</title>
      <link>https://blog.roostech.se/posts/get-function-configuration-from-deployed-function-app/</link>
      <pubDate>Wed, 02 Dec 2020 21:30:00 +0200</pubDate>
      
      <guid>https://blog.roostech.se/posts/get-function-configuration-from-deployed-function-app/</guid>
      <description>When you deploy an Azure Function app you also deploy the configuration for each function within the app. What if you would like to inspect the configuration of a function within a function app? If the function is using a timerTrigger, you might want to be able to look at that schedule for example. That would be easy to do using the Azure Portal, but what if you need to do it using PowerShell?</description>
    </item>
    
    <item>
      <title>Deploy Azure Function App without downtime</title>
      <link>https://blog.roostech.se/posts/deploy-azure-function-app-without-downtime/</link>
      <pubDate>Thu, 29 Oct 2020 21:53:00 +0200</pubDate>
      
      <guid>https://blog.roostech.se/posts/deploy-azure-function-app-without-downtime/</guid>
      <description>Deploying a function app without downtime should be standard practice for anyone working with Azure Functions, but it does not come out of the box. It requires an understanding of how function apps gets configured, how deployment slots can help and why warmup does not necessarily mean your solution is up and running. In this post I will go through how this can be achieved using CD-pipelines in Azure DevOps.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Classes on RoosTech</title>
    <link>http://blog.roostech.se/tags/classes/</link>
    <description>Recent content in Classes on RoosTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jul 2015 14:14:00 +0200</lastBuildDate><atom:link href="http://blog.roostech.se/tags/classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making PowerShell expressions easier</title>
      <link>http://blog.roostech.se/posts/making-powershell-expressions-easier/</link>
      <pubDate>Tue, 14 Jul 2015 14:14:00 +0200</pubDate>
      
      <guid>http://blog.roostech.se/posts/making-powershell-expressions-easier/</guid>
      <description>Expressions in PowerShell have a weird syntax and can quickly become complicated and hard to read. I thought about a way to make the syntax a bit easier to read and came up with a solution that might work for some cases. This solution contains two classes which can be used when piping to Select-Object for example. The first class describes the actual expression.
class Xpression { [string]$Name [scriptblock]$Expression [hashtable] getExpression() { return @{ Name = $this.</description>
    </item>
    
    <item>
      <title>Classes in Powershell 5.0</title>
      <link>http://blog.roostech.se/posts/classes-in-powershell-5.0/</link>
      <pubDate>Sun, 01 Mar 2015 14:14:00 +0200</pubDate>
      
      <guid>http://blog.roostech.se/posts/classes-in-powershell-5.0/</guid>
      <description>One of the big new features in Powershell 5.0 is classes. You can now define your own classes and create objects based on those custom classes. You can even create your own version of an existing class using inheritance.
In previous version of Powershell it was actually possible to create classes, but you had to write code in other languages like C# or Visual basic and then use that piece of code as the definition of the class.</description>
    </item>
    
  </channel>
</rss>
